[["index.html", "Úvod do statistiky Kapitola 1 Úvod 1.1 Příklad popisné statistiky 1.2 Příklad inferenční statistiky 1.3 Simulace 1.4 O modelech", " Úvod do statistiky Jan Schubert 2022-02-11 Kapitola 1 Úvod Tato kniha navazuje na kurz Základy logiky a matematiky (JSB536), ale jeho absolvování není nutné k pochopení látky. Statistika je nástroj, který aplikuje matematiku na získání užitečných informací z dat. Roli statistiky je možné rozdělit na dva úkoly: Popisování většího množství dat (popisná statistika) Předpovídání nějakého fenomenu/určení míry nejistoty (inferenční statistika) 1.1 Příklad popisné statistiky Mnoho fenomenů v každodenním světě je možné vyjádřit pomocí dat. Fotka se dá vyjádřit jako 3D matice (red, green, blue) řádků a sloupců, která vyjadřuje jednotlivé pixely. obrazek &lt;- jpeg::readJPEG(&quot;../imgs/img1.1.jpg&quot;) plot(0:1, 0:1, ann = FALSE, axes = FALSE, type = &quot;n&quot;) rasterImage(obrazek, 0.1, 0, 0.9, 1) Graf 1.1: bert de boer, CC BY 2.0 https://creativecommons.org/licenses/by/2.0, via Wikimedia Commons dim(obrazek) ## [1] 683 1024 3 Můžeme například zobrazit hodnoty červené barvy prvních 5x5 pixelů. obrazek[1:5, 1:5, 1] ## [,1] [,2] [,3] [,4] [,5] ## [1,] 0.3568627 0.3490196 0.3411765 0.3333333 0.3294118 ## [2,] 0.3607843 0.3529412 0.3450980 0.3372549 0.3294118 ## [3,] 0.3647059 0.3568627 0.3450980 0.3372549 0.3294118 ## [4,] 0.3686275 0.3607843 0.3490196 0.3411765 0.3294118 ## [5,] 0.3686275 0.3607843 0.3490196 0.3411765 0.3333333 Můžeme zobrazit pouze nějaké řádky a sloupce: plot(0:1,0:1,type=&quot;n&quot;,ann=FALSE,axes=FALSE) rasterImage(obrazek[1:500, 1:500, ] ,0,0,1,1) Protože obrázek je matice dat, můžeme na ni uplatnit různé statistické metody, jako například extrahovat 5 typů barev pomocí shlukovacího algoritmu. k &lt;- 5 cervena &lt;- as.vector(obrazek[, , 1]) zelena &lt;- as.vector(obrazek[, , 2]) modra &lt;- as.vector(obrazek[, , 3]) m &lt;- kmeans(cbind(cervena, zelena, modra), centers = k) barvy &lt;- m$centers barvy_rgb &lt;- rep(NA, k) plot(seq(1, k*10+10, length.out = 10), seq(1, 10, length.out = 10), axes = FALSE, ann = FALSE, type = &quot;n&quot;) for(i in 1:5) { barvy_rgb[i] &lt;- rgb(barvy[i, 1], barvy[i, 2], barvy[i, 3]) rect(i*10, 1, i*10+10, 8, col = barvy_rgb[i]) text(i*10+5, 9, labels = barvy_rgb[i]) } 1.2 Příklad inferenční statistiky Většina jevů okolo nás je ovlivněna náhodou, ať už z důvodu náhodného výběru nebo protože jsou součástí nějakého komplikovaného systému, který ovliňuje hodnoty jevu, který nás zajímá. Počet aut, které projedou na mostě, délka toaletního paríru, který je vyrobený v továrně, to jsou některé příklady jevů, které jsou ovlivněny náhodou. Statistika nám poskytuje soubor nástrojů, jak tuto náhodu (nejistotu) kvantifikovat. Pohlaví dětí je určeno náhodou a nově narozené dítě má zhruba stejnou pravděpodobnost, že bude děvče nebo chlapec. Řekněme, že z důvodu kapacitního plánování nás zajímá, kolik chlapců se narodí, pokud se v porodnoci denně narodí 25 dětí (sám počet narozených dětí by se dal modelovat jako náhodná proměnná). n &lt;- 25 p &lt;- 0.5 x &lt;- c(0:25) pmf &lt;- dbinom(x = x, size = n, p) plot(x, pmf, type = &quot;h&quot;, xlab = &quot;Počet chlapců z 25 narozených dětí&quot;, ylab = &quot;Pravděpodobnost&quot;, lwd = 15, col = &quot;#1f77b4&quot;) Graf 1.2: Pravděpodobnostní rozložení počtu chlapců z 25 narozených dětí Vidíme, že nejpravděpodobněji se narodí 12 chlapců (v 31% případů). Můžeme také z grafu vypočítat, že více než 15 chlapců se narodí zhruba v 11% případů, tedy zhruba 42 dní v roce. 1.3 Simulace K pochopení statistiky budeme používat programovací jazyk. Ten nám umožní, abychom si statistické koncepty osahali detailně. Budeme simulovat data, u kterých budeme vědět pravé hodnoty a sledovat, jak (ne)úspěšně různé statistické postupy pravé hodnoty odhadují. Cílem je, abychom statistiku pochopili tak, že ji budeme moci použít na konkrétní problém. Chceme dosáhnout toho, aby statistika byla jazykem, který můžeme použít na různé datové problémy. K pochopení statistiky budeme používat programovací jazyk R. Našim cílem je ale koncepty vysvětlovat a kódovat obecně tak, aby postupy byly lehko přenositelné do jiného programovacího jazyka. Vždy si tedy vysvětlíme konkétní výpočet nebo proceduru do podrobna a to i když existuje balíček nebo funkce, která by daný výpočet provedla za nás. 1.4 O modelech Modely jsou reprezentaci reality. Jsou (někdy) užitečné, protože zjednodušeně ukazují vlastnosti toho, co nás zajímá. Glóbus je příkladem modelu planety země. Glóbus nevystihuje přesně to, jak planeta vypadá. Nejsou na něm zaznamenány všechny ostrovy, jeho tvar neodpovídá přesně tvaru naší planety. Přesto jsou glóbusy užitečné k pochopení toho, jak plaeta vypadá. Dalším příkladem modelu je mapa. Mapa je ještě více zkresleným modelem terénu než glóbus (mapa musí vněstnat 3D svět do 2D modelu). Mnoho map dokonce velmi nepřesně reprezentuje terén, přesto jsou ale mapy nesmírně užitečné když se potřebujeme dostat z bodu A do bodu B. Stejně je tomu s modely statistickými. Nejsou přesným vyjádřením reality, ale mohou být užitečným vyjádřením reality. Jejich užitečnost bude záviset na činnosti, pro který jsme tento model stvořili. Důležité je dodat, že naše modely (ne)fungují na datech, které jsme jim dodali. Model, který je užitečný na jedněch datech může být bezcenný na jiných datech. Je tedy vždy potřeba přemýšlet o tom, zda je náš model vhodný pro data a situaci, na kterou se ho snažíme použít. "],["popisná-statistika.html", "Kapitola 2 Popisná statistika 2.1 Míry centrální tendence 2.2 Míry rozptýlenosti 2.3 Cvičení", " Kapitola 2 Popisná statistika Jak jsme zmínili v úvodu popisná statistika je jeden z hlavních cílů statistiky. Úkolem popisné statistiky je shrnout informace o našem výběru do pár čísel, které nám pomohou pochopit jaké má náš výběr vlastnosti. Hlavními vlastnostmi, které nás zajímají je: Jaká je typická hodnota měřené proměnné (míra centrální tendence) Na kolik se liší hodnoty jendotlivých pozorování (míra rozptýlenosti) Abychom si popisnou statistiku představili, budeme používat Novoroční/Vánoční projev prezidenta republiky. Nejdříve si data načteme. Text můžeme načíst různými způsoby, my použijeme funkci readLines, která vrátí zpět vektor. prezident &lt;- readLines(&quot;../dats/prezident.txt&quot;, encoding = &quot;UTF-8&quot;) Nejdříve text očistíme o mezery a čárky, přeneseme vše do malých písmen, rozdělíme na věty a potom na slova. Protože tuto proceduru budeme dělat vícekrát uděláme si na to funkci. Výstupem této funkce bude list, jehož každý element reprezentuje jednu větu a v rámci této věty jaká obsahuje slova. vycistit_text &lt;- function(.text) { # vse malym pismem .text &lt;- tolower(.text) # odstranime prazdne radky .text &lt;- .text[.text != &quot;&quot;] # odstranime carky .text &lt;- gsub(pattern = &quot;,&quot;, replacement = &quot;&quot;, x = .text) # rozdelit na vety, pokud najdeme &quot;.&quot; nebo &quot;!&quot; nebo &quot;?&quot; .text &lt;- unlist(strsplit(.text, split = &quot;\\\\.|\\\\!|\\\\?&quot;)) # vymazeme mezery na zacatku a konci .text &lt;- trimws(.text, which = c(&quot;left&quot;)) .text &lt;- trimws(.text, which = c(&quot;right&quot;)) # odstranime prazdne prvky, ktere vznikly protoze po tecce neni zadny text .text &lt;- .text[.text != &quot;&quot;] # rozdelime na slova slova &lt;- list() for (i in 1:length(.text)) { slova[[i]] &lt;- unlist(strsplit(.text[i], split = &quot; &quot;)) } return(slova) } prezident_clean &lt;- vycistit_text(prezident) 2.1 Míry centrální tendence Míry centrální tendence se snaží popsat nějakou typickou hodnotu proměnné. My si představíme modus, medián, průměr, absolutní a relativní četnost. Jaké míry centrální tendence můžeme na proměnné vypočítat se liší podle typu proměnné. Nominální proměnná je taková proměnná, u které nemůžeme hodnoty seřadit od nejmenšího po největší a nemůžeme ani určit o kolik je jedna hodnota větší než jiná. Tou nejzákladnější popisnou statistikou je četnost nějakého jevu a z ní odvozená míra centrální tendence modus. Modus je tedy nejčastější hodnota proměnné. Když se zamyslíte, tak u proměnné u které nemůžeme hodnoty seřadit ani jinak matematicky porovnat je nejčastější hodnota nejvíce vypovídající o typické hodnotě proměnné. Pojďme si jako příklad vypočítat nejčastější slovo z projevu. # nejprve prevedeme list na vekor slova &lt;- unlist(prezident_clean) tabulka_slov &lt;- table(slova) Naše tabulka četností je velká, obsahuje 651 hodnot. To mimo jiné znamená, že v projevu bylo použito 651 slov. Abychom získali nejčastější hodnotu musíme si tabulku seřadit od největší četnost po nejmenší a zobrazit prvních 10 hodnot. tabulka_slov_serazena &lt;- sort(tabulka_slov, decreasing = TRUE) Modus této proměnné by byla hodnota “a,” která se vyskytla 45x. To je v textové analýze typické a tato slova se označují jako “stopwords” a jsou zpravidla a textové analýzy vyřazena. Další měrou centrální tendence je median. Medián nám značí prostřední hodnotu nějaké proměnné. Můžeme si jeho výpočet představit tak, že hodnoty proměnné seřadíme od nejmenší po největší a vyberete hodnotu, která bude přesně uprostřed. Tato hodnota je medián. Matematicky se medián u proměnné \\(x\\) vypočítá jako \\[median(x) = x_{(n + 1)/2}\\] Pokud má naše proměnná sudý počet čísel, vypočítá se medián zpravidla jako průměr dvou prostředních hodnot, tedy \\[median(x) = \\frac{x_{n/2} + x_{n/2+1}}{2}\\] Řekněme, že bychom chtěli vědět medián počtu slov ve větě. Nejdříve si musíme pro každou větu (prvek listu prezident_clean) vypočítat počet slov. pocet_slov &lt;- sapply(prezident_clean, length) Velmi dobrým zvykem je si rozložení hodnot proměnné zobrazit graficky. Grafické zobrzení nám vždy poví nejenom o typické hodnotě proměnné, ale i o tom, jak se hodnoty liší (viz Míry rozptýlenosti @ref(#desc-vars)). Pokud máme číselnou proměnnou je nejčastějším způsobem, jak zobrazit hodnoty proměnné histogram. Histogram je: …je to grafické znázornění distribuce dat pomocí sloupcového grafu se sloupci stejné šířky, vyjadřující šířku intervalů (tříd), přičemž výška sloupců vyjadřuje četnost sledované veličiny v daném intervalu. Zdroj: Wikipedia Můžeme ho vytvořit pomocí funkce hist. Vidíme, že nejvíce nejčastěji věta obsahuje mezi 5 až 25 slovy, ale některé věty obsahují i více než 35 slov. hist(pocet_slov, col = &quot;#1f77b4&quot;, xlab = &quot;Počet slov ve větě&quot;, ylab = &quot;Četnost&quot;, main = &quot;Histogram počtu slov ve větě&quot;) Graf 2.1: Příklad histogramu na číselné (kardinální) proměnné Funkce hist automaticky zvolí vhodné intervaly pro sloupce v grafu. Pokud byste je chtěli změnit, můžete tak udělat pomocí argumentu breaks. hist(pocet_slov, col = &quot;#1f77b4&quot;, xlab = &quot;Počet slov ve větě&quot;, ylab = &quot;Četnost&quot;, main = &quot;Histogram počtu slov ve větě&quot;, breaks = 15) n &lt;- length(pocet_slov) # protoze mame sudy pocet slov vypocitame prumer dvou prostrednich hodnot i1 &lt;- n / 2 i2 &lt;- i1 + 1 .median &lt;- mean(pocet_slov[c(i1, i2)]) # nebo pomoci funkce median(pocet_slov) Medián můžeme také vypočítat pomocí funkce median. Mediánový počet slov ve větě je tedy 15.5. Pojďme si výpočet zobrazit graficky a seřadit si počet slov od nejmenšího po největší a zobrazit si medián na grafu. plot(1:n, sort(pocet_slov), col = &quot;#1f77b4&quot;, ylab = &quot;Počet slov ve větě&quot;, xlab = &quot;Pořadí&quot;, main = &quot;Počet slov ve větě seřazený podle velikosti&quot;, type = &quot;h&quot;, lwd = 5 ) # pridame prostredni hodnoty lines(i1, pocet_slov[i1], col = &quot;grey&quot;, type = &quot;h&quot;, lwd = 5) lines(i2, pocet_slov[i2], col = &quot;grey&quot;, type = &quot;h&quot;, lwd = 5) # pridame median lines(mean(c(i1, i2)), .median, col = &quot;red&quot;, type = &quot;h&quot;, lwd = 1, lty = 2) lines(c(-2, mean(c(i1, i2))), c(.median, .median), col = &quot;red&quot;, type = &quot;l&quot;, lwd = 1, lty = 2) legend(&quot;topleft&quot;, col = c(&quot;grey&quot;, &quot;red&quot;), lwd = c(4, 4), legend = c(&quot;Prostřední hodnoty&quot;, &quot;Median&quot;), cex = 0.7 ) Graf 2.2: Seřazení proměnné pro ilustraci výpočtu mediánu Asi nejčastější mírou centrální tendence, která se používá je průměr. Průměr je možné vypočítat pouze pro kardinální proměnné. Technicky kardinální proměnné rozlišujeme na diskrétní a spojitou. Diskrétní nabývá celých čísel (1,2,3,4 etc., například počet dětí), tedy \\(\\in Z\\). Spojitá proměnná pak teoreticky nebývá nekonečně mnoho hodnot, prakticky je ale omezena tím, jak přesně dokážeme danou metriku měřit. Platí ale, že spojité proměnné nabývají racionálních čísel, tedy \\(\\in R\\). Průměr proměnné \\(x\\) vypočítáme jako \\[\\overline{x} = \\frac{1}{n}\\sum_{i=1}^{n} x_i\\] Pojďme tedy vypočítat průměrný počet slov ve větě. V R můžeme použít funkci mean. sum(pocet_slov) / length(pocet_slov) ## [1] 16.56061 Někdy nechceme všem pozorováním při výpočtu průměru dát stejnou váhu. V takovém případě vypočítáme vážený průměr. Jeho vzorec je \\[\\overline{x} = \\frac{\\sum_{i=1}^{n} w_ix_i}{\\sum_{i=1}^{n}w_i}\\] Řekněme například, že bychom průměrný počet slov chtěli vážit pozicí v textu a dát slovům v první větě menší váhu, než slovům, které se objevily později v textu. w &lt;- 1:length(pocet_slov) sum(w * pocet_slov) / sum(w) ## [1] 16.21257 Důležitý rozdíl mezi mediánem a průměr nastává pokud nejsou data symetricky rozdělena. Symetricky rozdělená data jsou taková, která mají podobný počet hodnot nalevo a napravo od průměru. V našem případě rozložení počtu slov ve větě je medián menší než průměr. To je typické pro rozložení, která mají delší konec napravo od průměru. Průměr je totiž náchylný na extrémní pozorování. Medián je založený na pořadí, takže ho extrémní pozorování tolik neovlivní. Většína proměnných, která je ohraničená zleva (nemůže mít nemší hodnotu nežnějaká hranice) má asymetrické rozložení s více hodnotami napravo od průměru, např. příjem. V takových případech může být medián lepší mírou centrální tendence, ale výběr bude vždy záležet na otázce, kterou daty chceme zodpovědět. I pomocí mír centrální tendence se dají dělat zajívé analýzy. Řekněme, že nás zajímá rozdíl v relativní četnosti slov v projevu prezidenta a premiéra. # nacteme text projevu premiera premier &lt;- readLines(&quot;../dats/vlada.txt&quot;) premier_clean &lt;- vycistit_text(premier) # extrahujeme slova z vet do vektoru slova_premier &lt;- unlist(premier_clean) # nacteme a odstranime stopwords stopwords &lt;- readLines(&quot;https://raw.githubusercontent.com/stopwords-iso/stopwords-cs/master/stopwords-cs.txt&quot;, encoding = &quot;UTF-8&quot;) ## Warning in readLines(&quot;https://raw.githubusercontent.com/stopwords-iso/stopwords- ## cs/master/stopwords-cs.txt&quot;, : incomplete final line found on &#39;https:// ## raw.githubusercontent.com/stopwords-iso/stopwords-cs/master/stopwords-cs.txt&#39; # vybereme pouze slova, ktera nejsou ve stopwords slova_premier &lt;- slova_premier[!slova_premier %in% stopwords] slova &lt;- slova[!slova %in% stopwords] # vypocitame absolutni cetnost slov cetnost_premier &lt;- table(slova_premier) cetnost_prezident &lt;- table(slova) # vypocitame relativni cetnost cetnost_premier &lt;- cetnost_premier / sum(cetnost_premier) cetnost_prezident &lt;- cetnost_prezident / sum(cetnost_prezident) # vypocitame relativni cetnost # ted slouzime obe tabulky rel_cetnost &lt;- merge(data.frame(cetnost_premier), data.frame(cetnost_prezident), by.x = &quot;slova_premier&quot;, by.y = &quot;slova&quot;) # prejmenuje sloupce, aby davaly vice smysl colnames(rel_cetnost) &lt;- c(&quot;slova&quot;, &quot;premier&quot;, &quot;prezident&quot;) head(rel_cetnost) ## slova premier prezident ## 1 abychom 0.006666667 0.007564297 ## 2 alespoň 0.001666667 0.001512859 ## 3 bezpečnostní 0.001666667 0.001512859 ## 4 bojovat 0.001666667 0.001512859 ## 5 bych 0.003333333 0.012102874 ## 6 ceny 0.003333333 0.001512859 # vybereme nejcastejsich 20 slov pro každého top_premier &lt;- order(rel_cetnost$premier, decreasing = TRUE)[1:20] top_prezident &lt;-order(rel_cetnost$prezident, decreasing = TRUE)[1:20] # vyfiltrujeme top_index &lt;- unique(c(top_premier, top_prezident)) rel_cetnost_top &lt;- rel_cetnost[top_index, ] x &lt;- 1:nrow(rel_cetnost_top) plot(x, rel_cetnost_top$premier, type = &quot;h&quot;, xaxt = &quot;n&quot;, xlab = &quot;&quot;, ylab = &quot;Relativní četnost&quot;, col = &quot;#1f77b4&quot;, lwd = 3) lines(x+0.3, rel_cetnost_top$prezident, type = &quot;h&quot;, col = &quot;black&quot;, lwd = 3) axis(1, at=x, labels=rel_cetnost_top$slova, las = 3, cex.axis = 0.8) legend(&quot;topright&quot;, legend = c(&quot;Premiér&quot;, &quot;Prezident&quot;), col = c(&quot;#1f77b4&quot;, &quot;black&quot;), lwd = c(3,3), cex = 0.8) Graf 2.3: Top 20 slov podle relativní četnosti v projevu prezidenta a premiéra 2.2 Míry rozptýlenosti Míry centrální tendence nám udávájí hodnotu typického pozorování proměnné. Míry rozptýlenosti nám říkají, jak jsou hodnoty rozptýleny daleko od nějaké typické hodnoty. Pro kardinální proměnné se nejčastěji používá rozptyl, který vypočítáme tak, že každou hodnotu proměnné odečteme od průměru a umocníme. Tyto hodnoty sečteme a vydělíme počtem pozorování. Matematicky bychom rozptyl \\(\\sigma^2\\) proměnné \\(x\\) vypočítali jako \\[\\sigma^2 = \\frac{1}{n}\\sum_{i=1}^n (x_i - \\overline{x})^2\\] Ve statistice se také používá pro výpočet rozptýlenosti směrodatná odchylka \\(\\sigma\\), které se vypočítá jako \\[\\sigma = \\sqrt{\\sigma^2}\\] Ukažme si příklad na počtu slov. n&lt;- length(pocet_slov) rozptyl &lt;- sum((pocet_slov - mean(pocet_slov))^2) / n # nebo v R pomoci var rozptyl ## [1] 93.67057 smerodatna_odchylka &lt;- sqrt(rozptyl) # nebo v R pomoci sd smerodatna_odchylka ## [1] 9.678356 Ukažme si princip rozptylu/směrodatné odchylky na imaginárních datech. Na ukázku si vytvoříme proměnnou, která má 10 pozorování a zobrazíme je do grafu jako body. Červená čára označuje průměr těchto bodů. Horizontální čáry potom označují vzdálenost každého pozorování od průměrné hodnoty. Nejdříve si ukážeme příklad s menším rozptylem hodnot a pod ním příklad rozložení s větším rozptylem hodnot. Protože mají oba příklady stejný počet pozorování (10), můžete si rozdíl v jejich směrodatné odhylce představit jako rozdíl vertikálních úseček, které vedou od průměru. par(mfrow = c(2, 1)) x &lt;- rnorm(1e4, mean = 5, sd = 1) prumer &lt;- mean(x) n &lt;- seq(1, 10) smerodatna_odchylka &lt;- sd(x) # prvni graf plot(x[n], n, main = paste0(&quot;Směrodatná odchylka: &quot;, round(smerodatna_odchylka, 2)), xlim = c(0,10), xlab = &quot;&quot;, ylab = &quot;Číslo pozorovaní&quot;, pch = 19, col = &quot;#1f77b4&quot;) abline(v = prumer, col = &quot;black&quot;, lwd = 2) for(i in n) { lines(c(prumer, x[i]), c(i,i), col = &quot;#1f77b4&quot;, lwd = 2) } legend(&quot;topright&quot;, legend = c(&quot;Průměr&quot;, &quot;Vzdal. od průměru&quot;), col = c(&quot;black&quot;, &quot;#1f77b4&quot;), lwd = c(2,2), cex = 0.7) # druhy graf x2 &lt;- rnorm(1e4, mean = 5, sd = 2.5) prumer &lt;- mean(x2) smerodatna_odchylka &lt;- sd(x2) plot(x2[n], n, main = paste0(&quot;Směrodatná odchylka: &quot;, round(smerodatna_odchylka, 2)), xlim = c(0,10), xlab = &quot;&quot;, ylab = &quot;Číslo pozorovaní&quot;, pch = 19, col = &quot;#1f77b4&quot;) abline(v = prumer, col = &quot;black&quot;, lwd = 2) for(i in n) { lines(c(prumer, x2[i]), c(i,i), col = &quot;#1f77b4&quot;,lwd = 2) } legend(&quot;topright&quot;, legend = c(&quot;Průměr&quot;, &quot;Vzdal. od průměru&quot;), col = c(&quot;black&quot;, &quot;#1f77b4&quot;), lwd = c(2,2), cex = 0.7) Graf 2.4: Ukázka výpočtu směrodatné odchylky Pro úplnost, jak by vypadal histogram rozložení obou proměnných. V tomto případě jsme data generovali z normálního rozložení (viz kapitola Pravděpodobnostní rozložení). hist(x, col = adjustcolor(&quot;#1f77b4&quot;, 0.9), breaks = 20, xlab = &quot;&quot;, ylab = &quot;Četnost&quot;, main = &quot;&quot;, xlim = c(0,10)) hist(x2, col = adjustcolor(&quot;black&quot;, 0.4), breaks = 40, add = TRUE) Graf 2.5: Histogram bodů z normálního rozložení o průměru 5 a směrodatné odchylce 1 (modrá) a 2.5 (černá) Poslední mírou rozptylu, kteru si ukážeme je kvantil. Kvantile je: je ve statistice čísla (hodnoty), která dělí soubor seřazených (například naměřených) hodnot na několik zhruba stejně velkých částí. Kvantil je tedy míra polohy rozdělení pravděpodobnosti náhodné veličiny. Zdroj: Wikipedia. Rozdělit data na stejný počet velkých částí lze různě. Proto jsou různé typy rozdělení různě nazvány: Medián Kvantil rozdělující statistický soubor na dvě stejně početné množiny se nazývá medián, tzn. jedná se o kvantil \\(Q_{0.5}\\). Tercil Dva tercily rozdělují statistický soubor na třetiny. 1/3 prvků má hodnoty menší nebo rovné hodnotě prvního tercilu \\(Q_{1/3}\\), 2/3 prvků mají hodnoty menší nebo rovné hodnotě tercilu druhého \\(Q_{2/3}\\). Kvartil Tři kvartily rozdělují statistický soubor na čtvrtiny. 25 % prvků má hodnoty menší než dolní kvartil \\(Q_{0.25}\\) a 75 % prvků hodnoty menší než horní kvartil \\(Q_{0.75}\\); někdy se označují \\(Q_1\\) a \\(Q_3\\). Kvintil Čtyři kvintily dělí statistický soubor na pět stejných dílů. 20 % prvků souboru má hodnoty menší (nebo rovné) hodnotě prvního kvintilu, 80 % hodnoty větší (nebo &gt;rovné). Decil Decil dělí statistický soubor na desetiny. Jako k-tý decil označujeme \\(Q_{10/k}\\). Percentil Percentil dělí statistický soubor na setiny. Jako k-tý percentil označujeme \\(Q_{100/k}\\). Používá se například při vyhodnocení testů: Pokud má účastník umístění na 85. percentilu, znamená to, že 85 % účastníků mělo horší výsledek (a 15 % účastníků je lepších nebo stejných jako on [včetně jeho samého]). Znamená to, že účastník s nejlepším umístěním nebude mít percentil 100 %, ale nižší (o část vyjadřující procento jeho vlastního &gt;podílu na výsledku). Percentil tak vypočteme: \\(PR = \\frac{CF - (0.5 * F)}{N} * 100\\). Kde PR je hodnota percentilu, CF je kumulativní počet výsledků a F je počet výskytů počítaného výsledku (percentilu). Zdroj: Wikipedia V R můžeme kvantily vypočítat pomocí funkce quantile. V argumentu prob stanovíme jakou pravděpodobnost (percentil) chceme vypočítat. Například vypočítejme kvartily počtu slov. kvartil &lt;- quantile(pocet_slov, prob = c(0.25, 0.5, 0.75)) kvartil ## 25% 50% 75% ## 9.00 15.50 22.75 Vidíme, že 25% vět má méně než 9 slov a že 25% vět má více než 23 slov (nebo že 75% vět má méně než 23 slov). Někdy se hodnoty kvantilů používají k výpočtu mezikvantilových rozpětí tak, že se honodty kvantilů odečtou mezi sebou. Například mazikvartilové rozpětí se vypočítá jako \\(Q_{0.75} - Q_{0.25}\\). 2.3 Cvičení Vytvořte funkci na výpočet percentilu. "],["pravděpodobnostní-rozložení.html", "Kapitola 3 Pravděpodobnostní rozložení 3.1 Normální 3.2 T 3.3 Uniformní 3.4 Binomické 3.5 Poisson 3.6 Chi-kvadrát 3.7 Věrohodnost", " Kapitola 3 Pravděpodobnostní rozložení Tuto kapitolu začneme videm. Video Zdroj: Matemateca (IME/USP) Proč kuličky v tomto videu skončí v určitém množství v určitém sloupci? A proč skončí podobné množství kuliček v každém sloupci, pokud bychom kuličky pustili znova? Jak by se počet kuliček ve soupcích lišil? Pokud si z této knihy máte odnést jednu kapitolu, pak by to měla být tako :). Jak jsme zmínili v úvodu knihy, většina proměnných okolo nás se chová náhodně. To znamená, že může nabývat náhodných hodnot podle nějakého klíče (procesu). Náhodnost může vycházet z faktu, že měříme jenom nějakou část populace (např. výběrové šetření), z fyzikálních vlastností (např. váha součástky vyrobená v továrně nebude vždy stejná) nebo z chyby měření (např. teploměr nezměří stejnou teplotu vždy stejně, ale hodnoty měření budou kolísat okolo nějakého čísla). Pravděpodobnostní rozložení nám pomáhají kvantifikovat a predikovat míru nahodilosti. Typ pravděpodobnostního rozložení, který na popsání náhodnosti uplatníme vychází z našeho porumění vlastnostní rozložení a jeho vhodnosti na daný problém. A vlastnosti pravděpodobnostních rozložení je to, co si v této kapitole ukážeme. Na začátku jsme řekli, že budeme používat statistické modely a že tyto modely nejsou přesným vyjádřením reality, ale mohou být užitečným popsáním reality. V této kapitole začneme modely používat. 3.1 Normální Vraťme se k videu ze začátku kapitolu. Tomuto přístroji se říká Galton Box. 3.2 T location 3.3 Uniformní 3.4 Binomické Model Země Graf 3.1: Model Země 3.5 Poisson dispersed poisson 3.6 Chi-kvadrát 3.7 Věrohodnost library(leaflet) v2_location &lt;- read.csv(&quot;../dats/v2_location.csv&quot;) v2_location &lt;- v2_location[complete.cases(v2_location), ] v2_location$label &lt;- paste(paste(v2_location$landing_site, v2_location$date, sep = &quot;, &quot;)) leaflet(data = v2_location) %&gt;% addProviderTiles(providers$CartoDB.Positron) %&gt;% addCircleMarkers( lng = ~lon, lat = ~lat, color = &quot;#000000&quot;, opacity = 0.2, fillOpacity = 0.2, fillColor = &quot;#000000&quot;, radius = 2.5, stroke = FALSE, label = ~label ) "],["centrální-limitní-věta.html", "Kapitola 4 Centrální limitní věta", " Kapitola 4 Centrální limitní věta Následující animace ukazuje princip centrálního limitní věty. set.seed(42) # pocet vyberu S &lt;- 2^c(1:10) # ulozeni dat X &lt;- matrix(NA, nrow = 0, ncol = 2) colnames(X) &lt;- c(&quot;x&quot;, &quot;frame&quot;) # vyber o velikosti n N &lt;- 50 # simulace for(i in 1:length(S)) { s &lt;- S[i] for(n in 1:s) { mu &lt;- mean(runif(N, min = -10, max = 10)) X &lt;- rbind(X, c(mu, s)) } } # zobrazeni dat for(s in S) { hist(X[X[, 2] == s, 1], col = &quot;#1f77b4&quot;, ylab = &quot;Četnost&quot;, xlab = &quot;Průměr U ~ (-10, 10)&quot;, main = paste0(&quot;Počet výběrů: &quot;, s), xlim = c(-3, 3), breaks = 10) } Graf 4.1: Princip centrálního limitní věty "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
